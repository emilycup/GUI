
//import com.sun.java.util.jar.pack.Attribute.Layout;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter.DefaultHighlightPainter;
import javax.swing.text.Highlighter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author m1eusa
 */
public class JNotepad extends javax.swing.JFrame {

    /**
     * Creates new form JNotepad
     */
    public JNotepad() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiNew = new javax.swing.JMenuItem();
        jmiOpen = new javax.swing.JMenuItem();
        jmiSave = new javax.swing.JMenuItem();
        jmiSaveAs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiPageSetup = new javax.swing.JMenuItem();
        jmiPrint = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();
        jmEdit = new javax.swing.JMenu();
        jmiUndo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmiCut = new javax.swing.JMenuItem();
        jmiCopy = new javax.swing.JMenuItem();
        jmiPaste = new javax.swing.JMenuItem();
        jmiDelete = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmiFind = new javax.swing.JMenuItem();
        jmiFindNext = new javax.swing.JMenuItem();
        jmiReplace = new javax.swing.JMenuItem();
        jmiGoTo = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jmiSelectAll = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jmFormat = new javax.swing.JMenu();
        jmiWordWrap = new javax.swing.JMenuItem();
        jmiFont = new javax.swing.JMenuItem();
        jmView = new javax.swing.JMenu();
        jmiStatusBar = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        jmiViewHelp = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jmiAboutNotepad = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jmFile.setMnemonic('F');
        jmFile.setText("File");

        jmiNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jmiNew.setMnemonic('N');
        jmiNew.setText("New");
        jmiNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNewActionPerformed(evt);
            }
        });
        jmFile.add(jmiNew);

        jmiOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmiOpen.setText("Open...");
        jmiOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiOpenActionPerformed(evt);
            }
        });
        jmFile.add(jmiOpen);

        jmiSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jmiSave.setText("Save");
        jmiSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveActionPerformed(evt);
            }
        });
        jmFile.add(jmiSave);

        jmiSaveAs.setText("Save As...");
        jmiSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveAsActionPerformed(evt);
            }
        });
        jmFile.add(jmiSaveAs);
        jmFile.add(jSeparator1);

        jmiPageSetup.setMnemonic('u');
        jmiPageSetup.setText("Page Setup...");
        jmFile.add(jmiPageSetup);

        jmiPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jmiPrint.setText("Print...");
        jmFile.add(jmiPrint);
        jmFile.add(jSeparator2);

        jmiExit.setMnemonic('x');
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmFile.add(jmiExit);

        menuBar.add(jmFile);

        jmEdit.setMnemonic('E');
        jmEdit.setText("Edit");

        jmiUndo.setText("Undo");
        jmEdit.add(jmiUndo);
        jmEdit.add(jSeparator3);

        jmiCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jmiCut.setText("Cut");
        jmiCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCutActionPerformed(evt);
            }
        });
        jmEdit.add(jmiCut);

        jmiCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jmiCopy.setText("Copy");
        jmiCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCopyActionPerformed(evt);
            }
        });
        jmEdit.add(jmiCopy);

        jmiPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jmiPaste.setText("Paste");
        jmiPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPasteActionPerformed(evt);
            }
        });
        jmEdit.add(jmiPaste);

        jmiDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jmiDelete.setText("Delete");
        jmiDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDeleteActionPerformed(evt);
            }
        });
        jmEdit.add(jmiDelete);
        jmEdit.add(jSeparator4);

        jmiFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jmiFind.setText("Find...");
        jmiFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiFindActionPerformed(evt);
            }
        });
        jmEdit.add(jmiFind);

        jmiFindNext.setText("Find Next");
        jmEdit.add(jmiFindNext);

        jmiReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jmiReplace.setText("Replace...");
        jmEdit.add(jmiReplace);

        jmiGoTo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jmiGoTo.setText("Go To...");
        jmEdit.add(jmiGoTo);
        jmEdit.add(jSeparator5);

        jmiSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jmiSelectAll.setText("Select All");
        jmiSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSelectAllActionPerformed(evt);
            }
        });
        jmEdit.add(jmiSelectAll);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem11.setText("Time/Date");
        jmEdit.add(jMenuItem11);

        menuBar.add(jmEdit);

        jmFormat.setMnemonic('F');
        jmFormat.setText("Format");

        jmiWordWrap.setMnemonic('W');
        jmiWordWrap.setText("Word Wrap");
        jmFormat.add(jmiWordWrap);

        jmiFont.setMnemonic('F');
        jmiFont.setText("Font...");
        jmFormat.add(jmiFont);

        menuBar.add(jmFormat);

        jmView.setMnemonic('V');
        jmView.setText("View");

        jmiStatusBar.setMnemonic('S');
        jmiStatusBar.setText("Status Bar");
        jmView.add(jmiStatusBar);

        menuBar.add(jmView);

        jmHelp.setMnemonic('H');
        jmHelp.setText("Help");

        jmiViewHelp.setMnemonic('H');
        jmiViewHelp.setText("View Help");
        jmHelp.add(jmiViewHelp);
        jmHelp.add(jSeparator6);

        jmiAboutNotepad.setText("About Notepad");
        jmHelp.add(jmiAboutNotepad);

        menuBar.add(jmHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNewActionPerformed
        // if the file is new and empty, don't do anything
        if  (file == null && textArea.getText() == null) {
            // do nothing
        } else {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Are you sure you want to create a new file? \n( You will lose unsaved data )", "New", dialogButton);
            if(dialogResult == 0) {
                file = null;
                textArea.setText("");
            } else {
                // do nothing
            } 
        }
    }//GEN-LAST:event_jmiNewActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmiCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCopyActionPerformed
        textArea.copy();
    }//GEN-LAST:event_jmiCopyActionPerformed

    private void jmiPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPasteActionPerformed
        textArea.paste();
    }//GEN-LAST:event_jmiPasteActionPerformed

    private void jmiDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDeleteActionPerformed
        textArea.setText(textArea.getText().replace(textArea.getSelectedText(), ""));
    }//GEN-LAST:event_jmiDeleteActionPerformed

    private void jmiCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCutActionPerformed
        textArea.cut();
    }//GEN-LAST:event_jmiCutActionPerformed

    private void jmiSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSelectAllActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_jmiSelectAllActionPerformed

    private void jmiOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiOpenActionPerformed
        String line = null;
        FileReader fileReader;
        BufferedReader bufferedReader;
        JFileChooser fileChooser = new JFileChooser(); 

        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // sets a filter on what files will display in the file chooser modal 
        FileNameExtensionFilter fileNameExtention = new FileNameExtensionFilter("*.txt or *.java", "txt", "java");
        fileChooser.setFileFilter(fileNameExtention);
        
        // will open fileChooser dialog and return selected file
        int returnVal = fileChooser.showOpenDialog(null);      
        File selectedFile = fileChooser.getSelectedFile();
        file = selectedFile;
        this.setTitle(selectedFile.getName());

        // if the file is a valid choice, each line will be read and displayed 
        // in the textArea
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            
            try {
                fileReader = new FileReader(selectedFile);
                bufferedReader = new BufferedReader(fileReader);

                // read every line
                while ((line = bufferedReader.readLine()) != null) {
                    textArea.setText(line);
                }
            } catch (FileNotFoundException e) {
                System.out.println("File was not found!");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jmiOpenActionPerformed

    private void jmiSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveActionPerformed
        // checks for new content in notepad
        if (file == null) { 
            saveAs();
        }else { 
            save();
        }
    }//GEN-LAST:event_jmiSaveActionPerformed

    private void jmiSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveAsActionPerformed
       saveAs();
    }//GEN-LAST:event_jmiSaveAsActionPerformed

    private void jmiFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiFindActionPerformed
        // initial dialog configurations
        JDialog findDialog = new JDialog(this, "Find", false);
        findDialog.setSize(400,120);
        findDialog.setLocationRelativeTo(this);
        findDialog.setLayout(new FlowLayout());
        
        // set text field and label
        JLabel label = new JLabel("Find What: ");
        textFieldFind = new JTextField(15);
        label.setLabelFor(textFieldFind);
        
        // side buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));
        JButton findButton = new JButton("Find");
        JButton cancelButton = new JButton("Cancel");
        buttonPanel.add(findButton);
        buttonPanel.add(cancelButton);
        
        // radio buttons
//        JPanel directionPanel = new JPanel();
//        ButtonGroup buttonGroup = new ButtonGroup();
//        JRadioButton upRadioButton = new JRadioButton("Up");
//        upRadioButton.setSelected(true);
//        JRadioButton downRadioButton = new JRadioButton("Down");
//        buttonGroup.add(upRadioButton);
//        buttonGroup.add(downRadioButton);
//        directionPanel.add(upRadioButton);
//        directionPanel.add(downRadioButton);
        
        // action listeners
        
        // find button 
        findButton.addActionListener((ae) -> {
            String oldWholeText = wholeText;
            String oldTargetText = targetText;
            wholeText = textArea.getText();
            targetText = textFieldFind.getText();
            
            if (!oldWholeText.equals(wholeText) || !oldTargetText.equals(targetText)) {
                // reset caret index if user is searching for a brand new word
                caretIndex =  0;
                find(wholeText, targetText);
            } else{
                find(wholeText, targetText);
            }
        });
        
        // cancel button
        cancelButton.addActionListener((ae) -> {
            findDialog.dispose();
        });
        
//        // up button
//        upRadioButton.addActionListener((ae) -> {
//            
//        });
//        
//        // down button
//        downRadioButton.addActionListener((ae) -> {
//            
//        });

        // adding components to modeless dialog
        findDialog.add(label);
        findDialog.add(textFieldFind);
        findDialog.add(buttonPanel);
//        findDialog.add(directionPanel);
        findDialog.setVisible(true);
        
    }//GEN-LAST:event_jmiFindActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JNotepad().setVisible(true);
            }
        });
    }
        
    // save ====================================================================
    public void save(){
        FileWriter fileWriter;

        try { 
                fileWriter = new FileWriter(file);
                textArea.write(fileWriter);
                fileWriter.close();
            }catch (IOException e) { 
                e.printStackTrace();
            }
    }
    
    // save as =================================================================
    public void saveAs() {
        JFileChooser saveFileChooser = new JFileChooser();
        int returnVal = saveFileChooser.showSaveDialog(null);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                // will write to file here
                file = saveFileChooser.getSelectedFile();
                FileWriter fileWriter = new FileWriter(file.getPath());
                BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                bufferedWriter.write(textArea.getText());
                bufferedWriter.close(); 
            } catch (Exception ex) { 
                ex.printStackTrace();
            }
	}
    }
    
    // find ====================================================================
    public void find(String all, String target) {
        int targetIndex = all.indexOf(target, caretIndex);

        if(targetIndex > -1){
            textArea.setSelectionStart(targetIndex);
            textArea.setSelectionEnd(targetIndex + target.length());  

        }
        caretIndex = targetIndex + 1;
    }

    // My variables ============================================================
    private File file = null;
    private JTextField textFieldFind;
    private int caretIndex = 0;
    private String wholeText = "";
    private String targetText = "";
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JMenu jmEdit;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmFormat;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmView;
    private javax.swing.JMenuItem jmiAboutNotepad;
    private javax.swing.JMenuItem jmiCopy;
    private javax.swing.JMenuItem jmiCut;
    private javax.swing.JMenuItem jmiDelete;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiFind;
    private javax.swing.JMenuItem jmiFindNext;
    private javax.swing.JMenuItem jmiFont;
    private javax.swing.JMenuItem jmiGoTo;
    private javax.swing.JMenuItem jmiNew;
    private javax.swing.JMenuItem jmiOpen;
    private javax.swing.JMenuItem jmiPageSetup;
    private javax.swing.JMenuItem jmiPaste;
    private javax.swing.JMenuItem jmiPrint;
    private javax.swing.JMenuItem jmiReplace;
    private javax.swing.JMenuItem jmiSave;
    private javax.swing.JMenuItem jmiSaveAs;
    private javax.swing.JMenuItem jmiSelectAll;
    private javax.swing.JMenuItem jmiStatusBar;
    private javax.swing.JMenuItem jmiUndo;
    private javax.swing.JMenuItem jmiViewHelp;
    private javax.swing.JMenuItem jmiWordWrap;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
